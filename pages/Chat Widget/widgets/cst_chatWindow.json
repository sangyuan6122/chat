{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 71,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "copy": "{{copyToClipboard(cst_chatWindow.model.copyText);}}",
  "defaultModel": "{{ \n\n{\n\tchatHistory: chat.history\n}\n\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "copy"
    }
  ],
  "events": [
    "copy"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "jgr6vp0gcf",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 30,
  "mobileLeftColumn": 41,
  "mobileRightColumn": 64,
  "mobileTopRow": 0,
  "needsErrorInfo": false,
  "parentColumnSpace": 10.328125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "body {\n  font-family: sans-serif;\n  color: #f0f0f0;\n  line-height: 1.5rem;\n  background-color: #2e2e2e;\n  height: 100%;\n}\n\n.chat-widget {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.messages-container {\n  flex: 1;\n  position: absolute;\n  top: 0;\n  padding: 1rem;\n  width: 95%;\n}\n\n.message {\n  margin: 1rem;\n  padding: 0.5rem 0.75rem;\n}\n\n.user-message {\n  background-color: #333;\n  color: #ddd;\n  margin-left: 8rem;\n  border: solid 1px #444;\n  border-radius: 0.5rem;\n  font-style: italic;\n  padding-top: 1.1rem;\n}\n\ncode {\n  border: solid 1px #555;\n  border-radius: 0.25rem;\n  margin: 0.5rem 0;\n  padding: 0.25rem;\n  background-color: #444;\n}\n\na {\n  color: yellow;\n}\n\np {\n  margin-bottom: 0.75rem;\n}\n\nol, ul {\n  list-style: initial;\n  margin-left: 1rem;\n}\n\nol {\n  list-style-type: decimal;\n}\n\nol ul ul {\n  list-style-type: square;\n}\n\nol ul {\n  list-style-type: circle;\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n<!-- Chat widget container -->\n<div class=\"chat-widget\" id=\"chat-widget\">\n\t<div class=\"messages-container\" id=\"messages-container\">\n\t\t<!-- Messages will be dynamically inserted here -->\n\t</div>\n</div>",
    "js": "import { marked } from 'https://cdn.jsdelivr.net/npm/marked@14.1.1/+esm';\n\n/**\n * Container for holding the message elements\n * @type {HTMLElement}\n */\nlet messagesContainer = document.getElementById('messages-container');\n\n/**\n * Global variable to store the ID of the last message to scroll to.\n * @type {string}\n */\nlet scrollToID = '';\n\n/**\n * Renders a message inside the messages container.\n * The message can be either from the user or from the system.\n * \n * @param {string} message - The message content in markdown format.\n * @param {boolean} isUser - A flag indicating if the message is from the user.\n * @param {number} messageIndex - The index of the message to create a unique ID.\n */\nfunction renderMessage(message, isUser, messageIndex) {\n  // Create a new div for the message\n  let messageElement = document.createElement('div');\n  // Generate a unique ID for the message element based on the message index\n  let messageID = `msg${messageIndex}`;\n  // Add the generated ID to the message element\n  messageElement.id = messageID;\n\n  // Add class 'message', and 'user-message' if the message is from the user\n  messageElement.className = 'message ' + (isUser ? 'user-message' : '');\n\n  // Convert markdown to HTML using 'marked' library and highlight code if present\n  messageElement.innerHTML = marked(message || '', {\n    highlight: function (code, language) {\n      let validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n      return hljs.highlight(validLanguage, code).value;\n    }\n  });\n\n  // Add copy icons to each code block inside the message\n  messageElement.querySelectorAll('pre code').forEach(block => {\n    // Highlight the block of code\n    hljs.highlightElement(block);\n\n    // Extract the code text and create a copy icon\n    let codeText = block.innerText;\n    let icon = addCopyIcon(codeText);\n\n    // Set the copy icon's position inside the <pre> element\n    let preElement = block.parentElement;\n    preElement.style.position = 'relative'; // Ensure the <pre> has relative positioning\n    icon.style.position = 'absolute';\n    icon.style.top = '5px';\n    icon.style.right = '5px';\n\n    // Append the copy icon to the <pre> element\n    preElement.appendChild(icon);\n  });\n\n  // Append the message element to the messages container\n  messagesContainer.appendChild(messageElement);\n\n  // Update the scrollToID if this is a user message\n  scrollToID = isUser ? messageID : scrollToID;\n}\n\n/**\n * Handles the copy event by updating the app's model and triggering a 'copy' event.\n * \n * @param {string} text - The text to be copied.\n */\nfunction handleCopy(text) {\n  // Update the app model with the copied text\n  appsmith.updateModel({\n    copyText: text\n  });\n  // Trigger a 'copy' event\n  appsmith.triggerEvent('copy');\n}\n\n/**\n * Adds a copy icon to the code block for easy copying of the code.\n * \n * @param {string} text - The text to be copied when the icon is clicked.\n * @returns {HTMLElement} - The created copy icon element.\n */\nfunction addCopyIcon(text) {\n  // Create an <i> element for the copy icon\n  let copyIcon = document.createElement('i');\n  copyIcon.className = 'fas fa-copy copy-icon'; // Font Awesome class for copy icon\n  copyIcon.style.cursor = 'pointer'; // Make the icon clickable\n\n  // Add a click event listener to trigger the copy functionality\n  copyIcon.addEventListener('click', () => {\n    handleCopy(text);\n  });\n  return copyIcon;\n}\n\n/**\n * Updates the messages in the container by rendering the chat history.\n * It clears the existing messages and re-renders them based on the chat history.\n */\nfunction updateMessages() {\n  // Fetch the chat history from the app's model\n  let chatHistory = appsmith.model.chatHistory || [];\n\n  // If no messages exist, return early\n  if (!chatHistory[0]?.message) {\n    return;\n  }\n\n  // Clear existing messages\n  messagesContainer.innerHTML = '';\n\n  // Render each message in the chat history\n  chatHistory.forEach((msg, index) => renderMessage(msg.message, msg.role === 'USER', index + 1));\n\n  // Scroll to the last message using the scrollToID\n  scrollToMessage();\n}\n\n/**\n * Scrolls to the message with the ID stored in the global scrollToID variable.\n */\nfunction scrollToMessage() {\n  // Ensure scrollToID is set before trying to scroll\n  if (scrollToID) {\n    let element = document.getElementById(scrollToID);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: \"nearest\"\n      });\n    }\n  }\n}\n\n/**\n * Initializes the app by setting up the onModelChange event listener.\n * It ensures the messages update whenever the model changes.\n */\nappsmith.onReady(() => {\n  // Listen for changes in the model and update the messages when the model changes\n  appsmith.onModelChange(() => {\n    updateMessages();\n  });\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "body{\n\tfont-family: sans-serif;\n\tcolor: #f0f0f0;\n\tline-height: 1.5rem;\n\tbackground-color: #2e2e2e;\n\theight: 100%;\n}\n\n.chat-widget {\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n}\n\n.messages-container {\n\tflex: 1;\n\tposition: absolute;\n\ttop: 0;\n\tpadding: 1rem;\n\twidth: 95%;\n}\n\n.message {\n\tmargin: 1rem;\n\tpadding: 0.5rem 0.75rem;\n}\n\n.user-message {\n\tbackground-color: #333;\n\tcolor: #ddd;\n\tmargin-left: 8rem;\n\tborder: solid 1px #444;\n\tborder-radius: 0.5rem;\n\tfont-style: italic;\n\tpadding-top: 1.1rem;\n}\n\ncode {\n\tborder: solid 1px #555;\n\tborder-radius: 0.25rem;\n\tmargin: 0.5rem 0;\n\tpadding:0.25rem;\n\tbackground-color:#444;\n}\n\na {\n\tcolor: yellow;\n}\n\np {\n\tmargin-bottom: 0.75rem;\n}\n\nol, ul {\n\tlist-style: initial;\n\tmargin-left: 1rem;\n}\n\nol {\n\tlist-style-type: decimal;\n}\n\nol ul ul {\n\tlist-style-type: square;\n}\n\nol ul {\n\tlist-style-type: circle;\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n<!-- Chat widget container -->\n<div class=\"chat-widget\" id=\"chat-widget\">\n\t<div class=\"messages-container\" id=\"messages-container\">\n\t\t<!-- Messages will be dynamically inserted here -->\n\t</div>\n</div>",
    "js": "import { marked } from 'https://cdn.jsdelivr.net/npm/marked@14.1.1/+esm';\n\n/**\n * Container for holding the message elements\n * @type {HTMLElement}\n */\nlet messagesContainer = document.getElementById('messages-container');\n\n/**\n * Global variable to store the ID of the last message to scroll to.\n * @type {string}\n */\nlet scrollToID = '';\n\n/**\n * Renders a message inside the messages container.\n * The message can be either from the user or from the system.\n * \n * @param {string} message - The message content in markdown format.\n * @param {boolean} isUser - A flag indicating if the message is from the user.\n * @param {number} messageIndex - The index of the message to create a unique ID.\n */\nfunction renderMessage(message, isUser, messageIndex) {\n\t// Create a new div for the message\n\tlet messageElement = document.createElement('div');\n\t// Generate a unique ID for the message element based on the message index\n\tlet messageID = `msg${messageIndex}`;\n\t// Add the generated ID to the message element\n\tmessageElement.id = messageID;\n\n\t// Add class 'message', and 'user-message' if the message is from the user\n\tmessageElement.className = 'message ' + (isUser ? 'user-message' : '');\n\n\t// Convert markdown to HTML using 'marked' library and highlight code if present\n\tmessageElement.innerHTML = marked(message || '', {\n\t\thighlight: function(code, language) {\n\t\t\tlet validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n\t\t\treturn hljs.highlight(validLanguage, code).value;  \n\t\t}\n\t});\n\n\t// Add copy icons to each code block inside the message\n\tmessageElement.querySelectorAll('pre code').forEach((block) => {\n\t\t// Highlight the block of code\n\t\thljs.highlightElement(block);\n\n\t\t// Extract the code text and create a copy icon\n\t\tlet codeText = block.innerText;\n\t\tlet icon = addCopyIcon(codeText);\n\n\t\t// Set the copy icon's position inside the <pre> element\n\t\tlet preElement = block.parentElement;\n\t\tpreElement.style.position = 'relative'; // Ensure the <pre> has relative positioning\n\t\ticon.style.position = 'absolute';\n\t\ticon.style.top = '5px';\n\t\ticon.style.right = '5px';\n\n\t\t// Append the copy icon to the <pre> element\n\t\tpreElement.appendChild(icon);\n\t});\n\n\t// Append the message element to the messages container\n\tmessagesContainer.appendChild(messageElement);\n\n\t// Update the scrollToID if this is a user message\n\tscrollToID = isUser ? messageID : scrollToID;\n}\n\n/**\n * Handles the copy event by updating the app's model and triggering a 'copy' event.\n * \n * @param {string} text - The text to be copied.\n */\nfunction handleCopy(text) {\n\t// Update the app model with the copied text\n\tappsmith.updateModel({ copyText: text });\n\t// Trigger a 'copy' event\n\tappsmith.triggerEvent('copy');\n}\n\n/**\n * Adds a copy icon to the code block for easy copying of the code.\n * \n * @param {string} text - The text to be copied when the icon is clicked.\n * @returns {HTMLElement} - The created copy icon element.\n */\nfunction addCopyIcon(text) {\n\t// Create an <i> element for the copy icon\n\tlet copyIcon = document.createElement('i');\n\tcopyIcon.className = 'fas fa-copy copy-icon'; // Font Awesome class for copy icon\n\tcopyIcon.style.cursor = 'pointer'; // Make the icon clickable\n\n\t// Add a click event listener to trigger the copy functionality\n\tcopyIcon.addEventListener('click', () => {\n\t\thandleCopy(text);  \n\t});\n\treturn copyIcon;\n}\n\n/**\n * Updates the messages in the container by rendering the chat history.\n * It clears the existing messages and re-renders them based on the chat history.\n */\nfunction updateMessages() {\n\t// Fetch the chat history from the app's model\n\tlet chatHistory = appsmith.model.chatHistory || [];\n\n\t// If no messages exist, return early\n\tif (!chatHistory[0]?.message) { \n\t\treturn; \n\t}\n\n\t// Clear existing messages\n\tmessagesContainer.innerHTML = '';\n\n\t// Render each message in the chat history\n\tchatHistory.forEach((msg, index) => renderMessage(msg.message, msg.role === 'USER', index + 1));\n\n\t// Scroll to the last message using the scrollToID\n\tscrollToMessage();\n}\n\n/**\n * Scrolls to the message with the ID stored in the global scrollToID variable.\n */\nfunction scrollToMessage() {\n\t// Ensure scrollToID is set before trying to scroll\n\tif (scrollToID) {\n\t\tlet element = document.getElementById(scrollToID);\n\t\tif (element) {\n\t\t\telement.scrollIntoView({ behavior: 'smooth', block: 'start', inline: \"nearest\" });\n\t\t}\n\t}\n}\n\n/**\n * Initializes the app by setting up the onModelChange event listener.\n * It ensures the messages update whenever the model changes.\n */\nappsmith.onReady(() => {\n\t// Listen for changes in the model and update the messages when the model changes\n\tappsmith.onModelChange(() => {\n\t\tupdateMessages();\n\t});\n});\n"
  },
  "version": 1,
  "widgetId": "p9rmew8gnw",
  "widgetName": "cst_chatWindow"
}